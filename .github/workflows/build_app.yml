name: "build_zditor"

on:
  push:
    tags:
      - "v*" # 只会在以 v 开头的标签推送时触发
jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ""
          - platform: "windows-latest"
            args: ""
    runs-on: ${{ matrix.platform }}
    steps:
      # 使用 GitHub token 访问私有仓库
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.REPO }} # 替换为私有仓库的实际路径
          token: ${{ secrets.DEPLOY_TOKEN }} # 使用 GitHub 提供的 GITHUB_TOKEN 进行身份验证

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: npm install # change this to npm, pnpm or bun depending on which one you use.

      # 跳过 ubuntu 平台的 AppImage 构建
      - name: Skip AppImage build for Ubuntu
        if: matrix.platform == 'ubuntu-22.04'
        run: echo "Skipping AppImage build on Ubuntu."

      - name: Get latest release notes from CHANGELOG.md
        id: get_release_notes
        shell: bash
        run: |
          TAG_NAME="${GITHUB_REF##*/}"
          echo "Current tag: $TAG_NAME"

          if [ -f "CHANGELOG.md" ]; then
            echo "CHANGELOG.md exists, parsing release notes..."
            # Extract content between the current version header and next version header
            RELEASE_BODY=$(awk -v version="$TAG_NAME" '
              BEGIN { in_version = 0; first_line = 1 }
              /^## / && $2 == version { in_version = 1; next }
              /^## / && in_version { in_version = 0 }
              in_version {
                if (first_line) {
                  # Skip initial empty lines
                  if (NF) {
                    first_line = 0
                    print
                  }
                } else {
                  print
                }
              }
            ' CHANGELOG.md)
            
            echo "Raw release notes from CHANGELOG.md:"
            echo "------------------------------------"
            echo "$RELEASE_BODY"
            echo "------------------------------------"
            
            # Trim leading/trailing whitespace and empty lines (cross-platform method)
            RELEASE_BODY_TRIMMED=$(echo "$RELEASE_BODY" | sed -e ':a' -e '/./,$!d;/^\n*$/{$d;N;ba' -e '}' -e 's/[[:space:]]*$//')
            
            # Replace newlines with \n (for JSON output) - works on all platforms
            RELEASE_BODY_PROCESSED=$(echo "$RELEASE_BODY_TRIMMED" | awk '{printf "%s\\n", $0}' | sed 's/\\n$//')
            
            if [ -z "$RELEASE_BODY_PROCESSED" ]; then
              RELEASE_BODY_PROCESSED="See the assets to download this version and install."
              echo "No release notes found for this tag, using default message"
            fi
          else
            RELEASE_BODY_PROCESSED="See the assets to download this version and install."
            echo "CHANGELOG.md not found, using default message"
          fi

          echo "Final release notes that will be used:"
          echo "------------------------------------"
          echo "$RELEASE_BODY_PROCESSED"
          echo "------------------------------------"

          echo "release_body=${RELEASE_BODY_PROCESSED}" >> $GITHUB_OUTPUT
      
      
      - name: Cache Next.js build
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          NODE_OPTIONS: "--max-old-space-size=4096"
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: zditor-v__VERSION__
          releaseName: "Zditor v__VERSION__"
          releaseBody: ${{ steps.get_release_notes.outputs.release_body }}
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}