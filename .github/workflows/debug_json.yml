name: "build_zditor"

on:
  push:
    branches:
      - fix_parse_json
jobs:
  sync-to-r2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Extract version from tag
        id: extract_version
        run: |
          TAG_NAME="v0.5.9"
          VERSION="${TAG_NAME#v}" # 去掉 v 前缀
          echo "Extracted version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Configure AWS CLI for R2
        env:
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
        run: |
          # Update AWS CLI (if installed)
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

          # Configure R2 access
          aws configure set aws_access_key_id "$R2_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$R2_SECRET_ACCESS_KEY"
          aws configure set default.region auto
          aws configure set default.output json

      - name: Download files from GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          # Create temporary directory
          mkdir -p release_assets
          cd release_assets

          # Define file list
          FILES=(
            "latest.json"
            "zditor-${{ steps.extract_version.outputs.version }}-1.x86_64.rpm"
            "zditor_${{ steps.extract_version.outputs.version }}_aarch64.dmg"
            "zditor_${{ steps.extract_version.outputs.version }}_amd64.AppImage"
            "zditor_${{ steps.extract_version.outputs.version }}_amd64.AppImage.sig"
            "zditor_${{ steps.extract_version.outputs.version }}_amd64.deb"
            "zditor_${{ steps.extract_version.outputs.version }}_x64-setup.exe"
            "zditor_${{ steps.extract_version.outputs.version }}_x64-setup.exe.sig"
            "zditor_${{ steps.extract_version.outputs.version }}_x64.dmg"
            "zditor_${{ steps.extract_version.outputs.version }}_x64_en-US.msi"
            "zditor_${{ steps.extract_version.outputs.version }}_x64_en-US.msi.sig"
            "zditor_aarch64.app.tar.gz"
            "zditor_aarch64.app.tar.gz.sig"
            "zditor_x64.app.tar.gz"
            "zditor_x64.app.tar.gz.sig"
          )

          # Download each file from GitHub Release
          for FILE in "${FILES[@]}"; do
            echo "Downloading $FILE..."
            curl -L -O "https://github.com/zditor/zditor-docs/releases/download/zditor-v${{ steps.extract_version.outputs.version }}/${FILE}" || echo "Failed to download $FILE"
          done

          # Verify downloaded files
          ls -lh

      - name: Process latest.json
        run: |
          cd release_assets
          cat latest.json
          # Verify latest.json exists and is valid JSON
          if [ -f "latest.json" ]; then
            echo "Verifying latest.json..."
            if ! jq empty latest.json; then
              echo "Error: latest.json is not valid JSON"
              exit 1
            fi
            
            echo "Processing latest.json..."
            
            # Perform both URL replacements in a single jq command
            jq '
              walk(
                if type == "object" and has("url") then 
                  .url |= (
                    sub("https://github.com/zditor/zditor-docs/releases/download"; "https://download.zditor.com") |
                    sub("zditor-v[^/]+/"; "")
                  )
                else . end
              )' latest.json > latest_processed.json
            
            # Verify the processed JSON
            if ! jq empty latest_processed.json; then
              echo "Error: Processed JSON is invalid"
              exit 1
            fi
            
            mv latest_processed.json latest.json
            echo "Updated latest.json with R2 URLs:"
            cat latest.json
          else
            echo "latest.json not found, skipping processing"
            exit 0
          fi
      - name: Upload versioned files to R2
        env:
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
        run: |
          cd release_assets

          # Upload all files except latest.json to version directory
          for FILE in *; do
            if [ -f "$FILE" ] && [ "$FILE" != "latest.json" ]; then
              echo "Uploading $FILE to R2 version directory..."
              aws s3 cp \
                --endpoint-url "https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com" \
                "${FILE}" \
                "s3://${R2_BUCKET_NAME}/zditor-v${{ steps.extract_version.outputs.version }}/${FILE}"
            fi
          done

      - name: Upload latest.json to root of R2 bucket
        env:
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
        run: |
          cd release_assets
          
          if [ -f "latest.json" ]; then
            echo "Uploading latest.json to root of R2 bucket..."
            aws s3 cp \
              --endpoint-url "https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com" \
              "latest.json" \
              "s3://${R2_BUCKET_NAME}/latest.json"
          else
            echo "latest.json not found, skipping upload"
          fi

          echo "All files uploaded to:"
          echo "https://${R2_BUCKET_NAME}.${R2_ACCOUNT_ID}.r2.cloudflarestorage.com/"
      - name: Purge CDN Cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_ZONE_ID}/purge_cache" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            -H "Content-Type: application/json" \
            -d '{"files":["https://download.zditor.com/zditor-v${{ steps.set_version.outputs.version }}/*"]}'
        env:
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}